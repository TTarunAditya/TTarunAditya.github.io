@page "/fetchdata"
@inject HttpClient Http
@inject IJSRuntime JSRuntime;
@using Newtonsoft.Json;
@using Newtonsoft.Json.Converters
@using Newtonsoft.Json.Linq;
@using System.Dynamic
@using System.Text;

<PageTitle>Big Data Assignment - Data requests</PageTitle>

<h1>Big Data Assignment - Data requests</h1>

<br />

<div style="padding: 1rem; margin: 0.5rem; border-radius:3px; background-color: lightgray">
	<h3>View your assignment results here</h3>
	
	<EditForm Model=assignment>
	
		<InputRadioGroup @bind-Value=assignment.ass_id>
			@foreach (string ass in assignment.ass_options)
		   {
				<InputRadio Value=ass /> @ass <br/>
		   }
		</InputRadioGroup>
		
		<div style="margin: 1rem">
			<p>Submission ID 1</p>
			<InputText @bind-Value=assignment.sub_id_0></InputText>
		</div>
		
		<div style="margin: 1rem">
			<p>Submission ID 2</p>
			<InputText @bind-Value=assignment.sub_id_1></InputText>
		</div>
	
		<br/>
		
		<button @onclick=assignment.getSubmissionResult style="margin: 1rem" class="btn btn-primary">Get Results</button>

		<br />
	
		<h4>Results: </h4>
		
		<p class="text-danger">@assignment.error</p>
		
		@if (assignment.resJson != null)
		{
			<p>@assignment.resJson</p>;
		}
		else
		{
			<p>Your results will appear here</p>
		}
	
	</EditForm>
</div>


<div style="padding: 1rem; margin: 0.5rem; border-radius:3px; background-color: lightgray">
	<h3>View current job status here</h3>
	
	<button @onclick=getCurrentJobStatus style="margin: 1rem" class="btn btn-primary">Get Current Job Status</button>
	
	<br />
	
	<p class="text-danger">@jobStatusError</p>
	
	@if (jobStatus != null)
	{
		<p>@jobStatus</p>
	}
	else
	{
		<p>The status will appear here</p>
	}
	
</div> 


<div style="padding: 1rem; margin: 0.5rem; border-radius:3px; background-color: lightgray">
	<h3>View your assignment status here</h3>
	
	<div style="margin: 1rem">
		<p>Submission ID</p>
		<input @bind=statusSubmissionID></input>
	</div>
		
	<button @onclick=getSubmissionStatus style="margin: 1rem" class="btn btn-primary">Get Submission Status</button>
	
	<br />
	
	<h4>Results: </h4>
	
	<p class="text-danger">@submissionStatusError</p>
	
	@if (submissionStatus != null)
	{
		<p>@submissionStatus</p>
	}
	else
	{
		<p>The status will appear here</p>
	}
</div>


@code {

	private Assignment assignment = new Assignment();

	protected override async Task OnInitializedAsync()
	{
		await getCurrentJobStatus();
	}

	public string jobStatusError = "";
	public string? jobStatus = null;

	private async Task getCurrentJobStatus()
	{
		HttpClient Client = new HttpClient();
		Uri uri = new Uri("http://34.134.176.176:5000/wait");

		try
		{
			HttpResponseMessage response = await Client.GetAsync(uri);

			if (response.IsSuccessStatusCode)
			{
				jobStatus = await response.Content.ReadAsStringAsync();
			}
			else
			{
				jobStatusError = "GET error";
			}
		}
		catch (Exception e)
		{
			jobStatusError = "Network error: " + e.Message;
			return;
		}
	}

	public string submissionStatusError = "";
	public string? submissionStatus = null;
	public string statusSubmissionID = "240";

	private async Task getSubmissionStatus()
	{
		HttpClient Client = new HttpClient();
		Uri uri = new Uri("http://34.134.176.176:5000/wait");

		string json_str;
		try
		{
			json_str = $"{{\"_id\":{int.Parse(statusSubmissionID)} }}";
			Console.WriteLine(json_str);
		}
		catch (Exception e)
		{
			submissionStatusError = "JSON error: " + e.Message;
			return;
		}

		var data = new StringContent(json_str, Encoding.UTF8, "application/json");

		try
		{
			HttpResponseMessage response = await Client.PostAsync(uri, data);

			if (response.IsSuccessStatusCode)
			{
				//using await instead of Task.run because of error: Cannot wait on monitors on this runtime
				submissionStatus = response.Content.ReadAsStringAsync().Result;
			}
			else
			{
				submissionStatusError = "POST error";
			}
		}
		catch (Exception e)
		{
			submissionStatusError = "Network error: " + e.Message;
			return;
		}
	}


	public class Assignment
	{
		public string ass_id = "A2";

		public readonly string[] ass_options = { "A1", "A2" };

		public string sub_id_0 = "240";
		public string sub_id_1 = "713";

		public string error = "";
		public string? resJson = null;

		public dynamic? resultObj = null;

		async public Task getSubmissionResult()
		{
			HttpClient Client = new HttpClient();
			Uri uri = new Uri("http://34.134.176.176:5000/submission");

			string json_str;
			try
			{
				json_str = $"{{\"submission_id\":[{int.Parse(sub_id_0)}, {int.Parse(sub_id_1)}],\"ass_id\" : \"{ass_id}\" }}";
				Console.WriteLine(json_str);
			}
			catch (Exception e)
			{
				error = "JSON error: " + e.Message;
				return;
			}
			
			var data = new StringContent(json_str, Encoding.UTF8, "application/json");

			try
			{
				HttpResponseMessage response = await Client.PostAsync(uri, data);

				if (response.IsSuccessStatusCode)
				{
					resJson = response.Content.ReadAsStringAsync().Result;

					//var converter = new ExpandoObjectConverter();
					//resultObj = JsonConvert.DeserializeObject<ExpandoObject>(resJson, converter);
					//resultObj = System.Text.Json.JsonSerializer.Deserialize<ExpandoObject>(resJson);
				}
				else
				{
					error = "POST error";
				}
			}
			catch (Exception e)
			{
				error = "Network error: " + e.Message;
				return;
			}			
		}
	}
}
